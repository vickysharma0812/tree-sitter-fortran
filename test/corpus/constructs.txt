============================================
Program
============================================

PROGRAM TEST
END PROGRAM

PROGRAM TEST
END PROGRAM TEST

----

(translation_unit
  (program
    (program_statement (name))
    (end_program_statement))
  (program
    (program_statement (name))
    (end_program_statement (name))))

============================================
Shortest Program
============================================

END

---

(translation_unit
  (program
    (end_program_statement)))

============================================
Interface (explicit)
============================================

module unit_test_module
  private

  use iso_c_binding

  interface assert_equals
    module procedure assert_equals_int
    module procedure assert_equals_real8
  end interface

  real(8), save :: eps = epsilon(1.0d0)/epsilon(1.0)
  logical,save :: all_pass, passing
  character(5) :: nc = achar(27)//'[00m' ! reset color
  character(7) :: gr = achar(27)//'[0;32m' ! green
  character(7) :: rd = achar(27)//'[1;31m' ! red

  public :: assert_equals
  public :: all_pass

  contains

  function assert_equals_real8(val1, val2) result(passed)
    real(8) :: val1, val2
  end function

  function assert_equals_logi(val1, val2) result(passed)
    logical :: val1, val2
  end function
end module

----

(translation_unit
  (module (module_statement (name))
    (private_statement)
    (use_statement (module_name))
    (interface
      (interface_statement (name))
      (procedure_statement (method_name))
      (procedure_statement (method_name))
      (end_interface_statement))
    (variable_declaration
      (intrinsic_type)
      (size (argument_list (number_literal)))
      (type_qualifier)
      (assignment_statement
        (identifier)
        (math_expression
          (call_expression (identifier)
            (argument_list (number_literal)))
          (call_expression (identifier)
            (argument_list (number_literal))))))
    (variable_declaration (intrinsic_type) (type_qualifier) (identifier) (identifier))
    (variable_declaration
      (intrinsic_type)
      (size (argument_list (number_literal)))
      (assignment_statement (identifier)
        (concatenation_expression
          (call_expression (identifier) (argument_list (number_literal)))
          (string_literal))))
    (comment)
    (variable_declaration
      (intrinsic_type) (size (argument_list (number_literal)))
      (assignment_statement (identifier)
        (concatenation_expression
          (call_expression (identifier) (argument_list (number_literal)))
          (string_literal))))
    (comment)
    (variable_declaration
      (intrinsic_type) (size (argument_list (number_literal)))
      (assignment_statement
        (identifier)
        (concatenation_expression
          (call_expression (identifier) (argument_list (number_literal)))
          (string_literal))))
    (comment)
    (public_statement (identifier))
    (public_statement (identifier))
    (internal_procedures
      (contains_statement)
      (function
        (function_statement (name) (parameters (identifier) (identifier)) (function_result (identifier)))
        (variable_declaration
          (intrinsic_type)
          (size (argument_list  (number_literal)))
          (identifier)
          (identifier))
      (end_function_statement))
      (function
        (function_statement (name) (parameters (identifier) (identifier)) (function_result (identifier)))
        (variable_declaration (intrinsic_type) (identifier) (identifier))
      (end_function_statement)))
  (end_module_statement)))


============================================
Interface (explicit)
============================================

interface
  subroutine ex(a,b,c)
    implicit none
    real :: a,b(10,2)
    integer :: c
  end subroutine ex
  function why(t,f)
    implicit none
    logical,intent(in) :: t,f
    logical :: why
  end function why
end interface

----

(translation_unit
    (interface
      (interface_statement)
      (subroutine
        (subroutine_statement (name) (parameters (identifier) (identifier) (identifier)))
        (implicit_statement (none))
        (variable_declaration
          (intrinsic_type)
          (identifier)
          (call_expression
            (identifier)
            (argument_list (number_literal) (number_literal))))
        (variable_declaration (intrinsic_type) (identifier))
      (end_subroutine_statement (name)))
      (function
        (function_statement (name) (parameters (identifier) (identifier)))
        (implicit_statement (none))
        (variable_declaration (intrinsic_type) (type_qualifier) (identifier) (identifier))
        (variable_declaration (intrinsic_type) (identifier))
      (end_function_statement (name)))
    (end_interface_statement)))

============================================
Interface (abstract)
============================================

abstract interface
  subroutine ex(a,b,c)
    implicit none
    real :: a,b(10,2)
    integer :: c
  end subroutine ex
  function why(t,f)
    implicit none
    logical,intent(in) :: t,f
    logical :: why
  end function why
end interface

----

(translation_unit
    (interface
      (interface_statement (abstract_specifier))
      (subroutine
        (subroutine_statement (name) (parameters (identifier) (identifier) (identifier)))
        (implicit_statement (none))
        (variable_declaration
          (intrinsic_type)
          (identifier)
          (call_expression
            (identifier)
            (argument_list (number_literal) (number_literal))))
        (variable_declaration (intrinsic_type) (identifier))
      (end_subroutine_statement (name)))
      (function
        (function_statement (name) (parameters (identifier) (identifier)))
        (implicit_statement (none))
        (variable_declaration (intrinsic_type) (type_qualifier) (identifier) (identifier))
        (variable_declaration (intrinsic_type) (identifier))
      (end_function_statement (name)))
    (end_interface_statement)))

============================================
Interface (generic)
============================================

interface swap
  module procedure complex_swap
  module procedure logical_swap
end interface

----
(translation_unit
    (interface
      (interface_statement (name))
      (procedure_statement (method_name))
      (procedure_statement (method_name))
      (end_interface_statement)))

============================================
Interface (operator)
============================================

interface operator (+)
  module procedure char_plus_int
  module procedure int_plus_char
end interface operator (+)

interface operator (.not.)
  module procedure int_not
  function real_not(a)
    real :: real_not
    real,intent(in) :: a
  end function
end interface operator (.not.)

----

(translation_unit
  (interface
    (interface_statement (operator))
    (procedure_statement (method_name))
    (procedure_statement (method_name))
  (end_interface_statement (operator)))
  (interface
    (interface_statement (operator))
    (procedure_statement (method_name))
    (function
      (function_statement (name) (parameters (identifier)))
      (variable_declaration (intrinsic_type) (identifier))
      (variable_declaration (intrinsic_type) (type_qualifier) (identifier))
    (end_function_statement))
  (end_interface_statement (operator))))

============================================
Interface (assignment)
============================================

interface assignment (=)
  module procedure int_equals_char
end interface assignment (=)

----

(translation_unit
  (interface
    (interface_statement (assignment))
    (procedure_statement (method_name))
  (end_interface_statement (assignment))))

============================================
Use Operator and Assignment
============================================

module test
  use other, only: operator(==), assignment(=)
  public :: assignment(=)
  private :: operator(==)
end module

---

(translation_unit
  (module
    (module_statement (name))
    (use_statement (module_name)
      (included_items (operator) (assignment)))
    (public_statement (assignment))
    (private_statement (operator))
    (end_module_statement)))

============================================
Subroutine
============================================

pure recursive subroutine static_method(arg)
   integer, intent(in) :: arg
   REAL(8), SAVE :: counter
   counter = counter + arg
end subroutine static_method

subroutine parens_but_no_args()
end subroutine

subroutine exported_fun(arg1, arg2) bind(c)
end subroutine

subroutine exported_fun2() bind(c, name="f90_func")
end subroutine

SUBROUTINE WITH_INTERNAL_PROC
  integer :: cmd_stat

  CALL CHECK_RETURN_VAL("ls *", cmd_stat)

  CONTAINS
    SUBROUTINE CHECK_RETURN_VAL(cmd, title, istat)
      integer, intent(out) :: istat
      character(*), intent(in) :: cmd
      character*(*), intent(in) :: title
      istat = SYSTEM(cmd)
      RETURN
    END SUBROUTINE
END SUBROUTINE

----

(translation_unit
  (subroutine
    (subroutine_statement
      (procedure_qualifier)
      (procedure_qualifier)
      (name)
      (parameters (identifier)))
    (variable_declaration (intrinsic_type) (type_qualifier) (identifier))
    (variable_declaration
      (intrinsic_type) (size (argument_list (number_literal))) (type_qualifier) (identifier))
    (assignment_statement
      (identifier) (math_expression (identifier) (identifier)))
    (end_subroutine_statement (name)))
  (subroutine
    (subroutine_statement (name))
    (end_subroutine_statement))
  (subroutine
    (subroutine_statement (name)
      (parameters (identifier) (identifier))
      (language_binding (identifier)))
    (end_subroutine_statement))
  (subroutine
    (subroutine_statement (name)
      (language_binding
        (identifier)
        (keyword_argument (identifier) (string_literal))))
    (end_subroutine_statement))
  (subroutine (subroutine_statement (name))
    (variable_declaration (intrinsic_type) (identifier))
    (subroutine_call (identifier) (argument_list (string_literal) (identifier)))
    (internal_procedures
      (contains_statement)
      (subroutine
        (subroutine_statement (name) (parameters (identifier) (identifier) (identifier)))
        (variable_declaration (intrinsic_type) (type_qualifier) (identifier))
        (variable_declaration
          (intrinsic_type) (size (argument_list (assumed_size)))
          (type_qualifier)
          (identifier))
        (variable_declaration
          (intrinsic_type) (size (assumed_size) (argument_list (assumed_size)))
          (type_qualifier)
          (identifier))
        (assignment_statement (identifier)
          (call_expression (identifier) (argument_list (identifier))))
        (keyword_statement)
    (end_subroutine_statement)))
  (end_subroutine_statement)))

============================================
Functions (simple)
============================================

real(8) function current_time()
  ! returns the wall clock time in seconds.
  use mpi
  current_time = mpi_wtime()
end function

type(object) function new_object
  ! returns the current date string
  TYPE(object) :: obj
  obj%counter = 0
  new_object = obj
end function

integer(8) function exported_fun(arg1, arg2) bind(c)
end function

complex(8) function exported_fun2() bind(c, name="f90_func")
end function

function exported_fun3() result(res) bind(c, name="fun3")
end function

function exported_fun4() bind(c, name="fun3") result(res)
end function


----

(translation_unit
  (function
    (function_statement
      (intrinsic_type) (size (argument_list (number_literal)))
      (name))
    (comment)
    (use_statement (module_name))
    (assignment_statement (identifier) (call_expression (identifier) (argument_list)))
  (end_function_statement))
  (function
    (function_statement (derived_type (type_name))
      (name))
    (comment)
    (variable_declaration (derived_type (type_name)) (identifier))
    (assignment_statement
      (derived_type_member_expression (identifier) (type_member))
      (number_literal))
    (assignment_statement (identifier) (identifier))
  (end_function_statement))
  (function
    (function_statement
      (intrinsic_type) (size (argument_list (number_literal)))
      (name)
      (parameters (identifier) (identifier))
       (language_binding (identifier)))
    (end_function_statement))
  (function
    (function_statement
      (intrinsic_type) (size (argument_list (number_literal)))
      (name)
      (language_binding
        (identifier)
        (keyword_argument (identifier) (string_literal))))
    (end_function_statement))
  (function
    (function_statement (name)
      (function_result (identifier))
      (language_binding (identifier)
        (keyword_argument (identifier) (string_literal))))
    (end_function_statement))
  (function
    (function_statement (name)
      (language_binding (identifier)
        (keyword_argument (identifier) (string_literal)))
      (function_result (identifier)))
    (end_function_statement)))

============================================
Functions (complex)
============================================

pure elemental logical function test(x, y) result(value)
  REAL(8) :: x, y
  logical :: value = (x == y)

contains

  real impure function internal_proc result(x)
    real(8) x = 1.0
  end function

  subroutine increment(i)
    integer :: i
    i = i + 1
  end subroutine

end function test

----

(translation_unit
  (function
    (function_statement
      (procedure_qualifier)
      (procedure_qualifier)
      (intrinsic_type)
      (name)
      (parameters (identifier) (identifier))
      (function_result (identifier)))
    (variable_declaration
      (intrinsic_type) (size (argument_list  (number_literal)))
      (identifier)
      (identifier))
    (variable_declaration
      (intrinsic_type)
      (assignment_statement
        (identifier)
        (parenthesized_expression  (relational_expression (identifier) (identifier)))))
    (internal_procedures
      (contains_statement)
      (function
        (function_statement
          (intrinsic_type)
          (procedure_qualifier)
          (name)
          (function_result (identifier)))
        (variable_declaration
          (intrinsic_type) (size (argument_list (number_literal)))
          (assignment_statement (identifier) (number_literal)))
        (end_function_statement))
        (subroutine
          (subroutine_statement (name) (parameters (identifier)))
          (variable_declaration (intrinsic_type) (identifier))
          (assignment_statement
            (identifier)
            (math_expression (identifier) (number_literal)))
        (end_subroutine_statement)))
      (end_function_statement (name))))

============================================
Derived Type Variable Declarations
============================================

program test
  type simple
  end type
  type, public :: custom_type
    sequence
    real(8) :: x,y,z
    integer :: w,h,l
    real(eb), allocatable, dimension(:, :, :) :: vals
    procedure(), pointer, nopass :: do_nothing => null()
    contains
       procedure, nopass, non_overridable :: static_method ! static method
       procedure instance_method ! instance method
       procedure, public, pass(self) :: pass_method
       generic, pass :: binding_name => method_name, method_name2
       generic, private :: assignment(=) => assign_method
       generic, private :: operator(+) => add_method
       procedure :: one, two => three
       final :: finalize
  end type custom_type
end program

----

(translation_unit
  (program
    (program_statement (name))
    (derived_type_definition
      (derived_type_statement (type_name))
      (end_type_statement))
    (derived_type_definition
      (derived_type_statement
       (access_specifier)
       (type_name))
      (sequence_statement)
      (variable_declaration (intrinsic_type) (size (argument_list (number_literal)))
        (identifier)
        (identifier)
        (identifier))
      (variable_declaration (intrinsic_type)
        (identifier)
        (identifier)
        (identifier))
      (variable_declaration
        (intrinsic_type) (size (argument_list (identifier)))
        (type_qualifier)
        (type_qualifier
          (argument_list (extent_specifier) (extent_specifier) (extent_specifier)))
        (identifier))
      (variable_declaration
        (procedure
          (procedure_attribute) (procedure_attribute))
        (pointer_association_statement (identifier) (null_literal)))
      (derived_type_procedures
          (contains_statement)
          (procedure_statement (procedure_attribute) (procedure_attribute) (method_name))
          (comment)
          (procedure_statement (method_name))
          (comment)
          (procedure_statement (procedure_attribute) (procedure_attribute (identifier)) (method_name))
          (procedure_statement (procedure_attribute) (binding_name (identifier)) (method_name) (method_name))
          (procedure_statement (procedure_attribute) (binding_name (assignment)) (method_name))
          (procedure_statement (procedure_attribute) (binding_name (operator)) (method_name))          
          (procedure_statement (method_name) (binding_name (identifier)) (method_name))
          (procedure_statement (method_name)))
      (end_type_statement (name)))
  (end_program_statement)))

============================================
Derived Type Attributes
============================================

program test
  type, private, abstract :: abstract_type
  end type abstract_type
  type, public, extends(abstract_type) :: concrete_type
  end type concrete_type
end program

----

(translation_unit
  (program
    (program_statement (name))
    (derived_type_definition
      (derived_type_statement
        access: (access_specifier)
        (abstract_specifier)
        (type_name))
      (end_type_statement (name)))
    (derived_type_definition
      (derived_type_statement
        access: (access_specifier)
        base: (base_type_specifier (identifier))
        (type_name))
      (end_type_statement (name)))
  (end_program_statement)))

============================================
Deferred binding
============================================

program test
  type foo
  contains
    procedure(bar_impl), deferred :: bar
  end type
  abstract interface
    subroutine bar_impl
    end subroutine
  end interface
end program

---

(translation_unit
  (program
    (program_statement (name))
    (derived_type_definition
      (derived_type_statement (type_name))
      (derived_type_procedures
        (contains_statement)
        (procedure_statement (procedure_interface) (procedure_attribute) (method_name)))
      (end_type_statement))
    (interface
      (interface_statement (abstract_specifier))
        (subroutine
          (subroutine_statement (name))
          (end_subroutine_statement))
      (end_interface_statement))
    (end_program_statement)))
      
============================================
Derived Type Private Type-Bound Procedures
============================================

program test
  type foo
  contains
    private
    procedure :: bar
    procedure, public :: quux
  end type foo
end program test

---

(translation_unit
  (program
    (program_statement (name))
    (derived_type_definition
      (derived_type_statement (type_name))
      (derived_type_procedures
        (contains_statement)
        (private_statement)
        (procedure_statement (method_name))
        (procedure_statement (procedure_attribute) (method_name)))
      (end_type_statement (name)))
    (end_program_statement (name))))

============================================
Derived Type Procedure Pointer Components
============================================

program test
  type foo
    procedure(some_interface), pointer :: bar => null()
    procedure(some_interface), pointer, nopass :: quux
  end type foo
end program test

---

(translation_unit
  (program
    (program_statement (name))
    (derived_type_definition
      (derived_type_statement (type_name))
      (variable_declaration
        (procedure (procedure_interface) (procedure_attribute))
        (pointer_association_statement (identifier) (null_literal)))
      (variable_declaration
        (procedure (procedure_interface) (procedure_attribute) (procedure_attribute))
        (identifier))
      (end_type_statement (name)))
    (end_program_statement (name))))

============================================
Submodule definition (simple)
============================================

SUBMODULE(BoundingBox_Method) ConstructorMethods
IMPLICIT NONE
CONTAINS

END SUBMODULE ConstructorMethods

SUBMODULE(BoundingBox_Method:ConstructorMethods) ConstructorMethods_child
IMPLICIT NONE
CONTAINS

END SUBMODULE ConstructorMethods_child

-----

(translation_unit
  (submodule
    (submodule_statement (module_name (name)) (name))
    (implicit_statement (none))
    (internal_procedures
      (contains_statement))
    (end_submodule_statement (name)))
  (submodule
    (submodule_statement (module_name (name)) (module_name (name)) (name))
    (implicit_statement (none))
    (internal_procedures
      (contains_statement))
    (end_submodule_statement (name))))

===============================================
Module definition (with internal module procedures)
===============================================

MODULE BoundingBox_Method

PRIVATE

INTERFACE
  MODULE PURE SUBROUTINE initiate_1(obj, nsd, lim)
    CLASS(BoundingBox_), INTENT(INOUT) :: obj
  END SUBROUTINE initiate_1
END INTERFACE

INTERFACE
  MODULE FUNCTION Constructor_2(Anotherobj) RESULT(Ans)
    CLASS(BoundingBox_), POINTER :: Ans
  END FUNCTION Constructor_2
END INTERFACE

END MODULE BoundingBox_Method

-----

(translation_unit
  (module
    (module_statement (name))
    (private_statement)
    (interface
      (interface_statement)
      (subroutine
        (subroutine_statement (procedure_qualifier) (procedure_qualifier) (name) (parameters (identifier) (identifier) (identifier)))
        (variable_declaration (derived_type (type_name)) (type_qualifier) (identifier))
      (end_subroutine_statement (name)))
    (end_interface_statement))
    (interface
      (interface_statement)
      (function
        (function_statement (procedure_qualifier) (name) (parameters (identifier)) (function_result (identifier)))
        (variable_declaration (derived_type (type_name)) (type_qualifier) (identifier))
      (end_function_statement (name)))
    (end_interface_statement))
  (end_module_statement (name))))

============================================
Procedure as argument
============================================

module test
  abstract interface
    subroutine do_nothing
    end subroutine do_nothing
  end interface
contains
  subroutine apply(f, g)
    procedure(do_nothing) :: f
    procedure(do_nothing), optional :: g
    call f()
  end subroutine apply
end module test

---

(translation_unit
  (module
    (module_statement (name))
    (interface
      (interface_statement (abstract_specifier))
      (subroutine
        (subroutine_statement (name))
        (end_subroutine_statement (name)))
      (end_interface_statement))
    (internal_procedures
      (contains_statement)
      (subroutine
        (subroutine_statement (name) (parameters (identifier) (identifier)))
        (variable_declaration (procedure (procedure_interface)) (identifier))
        (variable_declaration (procedure (procedure_interface)) (type_qualifier) (identifier))
        (subroutine_call (identifier) (argument_list))
        (end_subroutine_statement (name))))
    (end_module_statement (name))))

============================================
Block Construct
============================================

program block_demo
  implicit none
  real :: y = 1
  print*, y

  block
    real :: x = 3.142
    print*, x
    y = x
    inner: block
      real :: y = 12.1
      print*, y
    end block inner
  end block

  print*, y
end program block_demo

---

(translation_unit
  (program
    (program_statement (name))
    (implicit_statement (none))
    (variable_declaration
      (intrinsic_type)
      (assignment_statement (identifier) (number_literal)))
    (print_statement (format_identifier)
        (output_item_list (identifier)))
    (block_construct
      (variable_declaration
        (intrinsic_type)
        (assignment_statement (identifier) (number_literal)))
      (print_statement (format_identifier)
        (output_item_list (identifier)))
      (assignment_statement (identifier) (identifier))
      (block_construct (block_label_start_expression)
        (variable_declaration (intrinsic_type)
          (assignment_statement (identifier) (number_literal)))
        (print_statement (format_identifier)
          (output_item_list (identifier)))
        (end_block_construct_statement (block_label)))
      (end_block_construct_statement))
    (print_statement (format_identifier)
        (output_item_list (identifier)))
    (end_program_statement (name))))
